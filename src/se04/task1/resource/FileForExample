import java.applet.Applet;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

public class JavaApplication3 {

   public static class Aply extends Applet {

	private class VerticalStringMover { // класс, позволяющих двигать строку по вертикали

                // константы, определяющие направление движения
		public static final int UP = 1;
		public static final int DOWN = 2;

                // константа, определяющая расстояние между символами строки
		private static final int SPACE_BETWEEN_CHARS = 8;

		private String string; // строка текста, которую следует отобразить

                // массивы координат символов
		private int xs[];
		private int ys[];
		private int direction; // направление: 1 = вверх, 2 - вниз
		private int step; // количество пикселей, на которое следует сдвигать символы строки

                // координаты ограничивающего поля
                private int fieldStartX, fieldEndX;
                private int fieldStartY, fieldEndY;

		public VerticalStringMover(String string, int direction, int step, int x, int y, int fieldWidth, int fieldHeight) {
			this.string = string;
			this.direction = direction;
			this.step = step;

                        // выделение памяти под массивы координат
			this.xs = new int[string.length()];
			this.ys = new int[string.length()];

                        if (direction == DOWN) {
                            this.fieldStartX = x ;
                            this.fieldEndX = x - fieldWidth;
                            this.fieldStartY = y;
                            this.fieldEndY = y + fieldHeight;
                        }
                        else {
                            this.fieldStartX = x + string.length() * SPACE_BETWEEN_CHARS;
                            this.fieldEndX = this.fieldStartX + fieldWidth;
                            this.fieldStartY = y - string.length() * SPACE_BETWEEN_CHARS;
                            this.fieldEndY = this.fieldStartY - fieldHeight;
                        }

                        // присваивание изначальных координат каждому символу
			xs[0] = x;
			ys[0] = y;
			for (int i = 1; i<string.length(); ++i) {
				xs[i] = xs[i-1] + SPACE_BETWEEN_CHARS;
				ys[i] = ys[i-1] - SPACE_BETWEEN_CHARS;
			}
		}

		public void move(Graphics g) {
			changeCoordinates(); // сдвинуть все символы
			redraw(g); // перерисовать строку
		}

		private void changeCoordinates() {
			for (int i = 0; i<string.length(); ++i) {
				ys[i] += direction == UP? -step: step; // изменить координаты y в зависимости от выбранного направления
                                xs[i] += direction == UP? step: -step;
                        }
		}

		private void redraw(Graphics g) {
			for (int i = 0; i<string.length(); ++i) {
                                // трюк создания строки из одного символа
				char c = string.charAt(i);
				char ca[] = new char[1];
				ca[0] = c;

                                // отображение строки из одного символа в соответствующих координатах
                                // и символ находится в пределах поля
                                switch (direction) {
                                    case UP:
                                        if (xs[i]>fieldStartX && xs[i]<fieldEndX && ys[i]<fieldStartY && ys[i]>fieldEndY)
                                            g.drawString(new String(ca), xs[i], ys[i]);

                                    case DOWN:
                                        if (xs[i]<fieldStartX && xs[i]>fieldEndX && ys[i]>fieldStartY && ys[i]<fieldEndY)
                                            g.drawString(new String(ca), xs[i], ys[i]);
                                }
			}
		}

	}

	private class HorisontalStringMover { // класс, позволяющий сдвигать строку по горизонтали
                // константы направления движения строки
		public static final int LEFT = 1;
		public static final int RIGHT = 2;

		private static final int SPACE_BETWEEN_CHARS = 8;

		private String string; // строка текста, которую следует отобразить

		private int xs[]; // массив координат х каждого символа
		private int direction; // направление движения строки: 1 - ВЛЕВО, 2 - ВПРАВО
		private int step; // шаг (на сколько пикселей двигать строку)
		private int y; // координата у всей строки
                private int fieldStartX, fieldEndX; // координаты конца и начала поля берущейс строки

		public HorisontalStringMover(String string, int direction, int step, int x, int y, int fieldLength) {
			this.string = string;
			this.direction = direction;
			this.step = step;

                        if (direction == LEFT) {
                            this.fieldStartX = x - fieldLength;
                            this.fieldEndX = x;
                        }
                        else {
                            this.fieldStartX = x + string.length() * SPACE_BETWEEN_CHARS;
                            this.fieldEndX = x + string.length() * SPACE_BETWEEN_CHARS + fieldLength;
                        }

			this.xs = new int[string.length()];
			this.y = y;

                        // присваивания изначальных значений координат
			xs[0] = x;
			for (int i = 1; i<string.length(); ++i) {
				xs[i] = xs[i-1] + SPACE_BETWEEN_CHARS;
			}
		}

		public void move(Graphics g) {
			changeCoordinates(); // метод, сдвигающий строку
			redraw(g); // перерисовка строки на экране
		}

		private void changeCoordinates() {
                        // в зависимости от направление изменить координаты каждого символа на значение шага
			for (int i = 0; i<string.length(); ++i)
				xs[i] += direction == LEFT? -step: step;
		}

		private void redraw(Graphics g) {
			for (int i = 0; i<string.length(); ++i) {
                                // трюк создания строки из одного символа
				char c = string.charAt(i);
				char ca[] = new char[1];
				ca[0] = c;

                                // отображение символа в соответствии с его координатами, если он не выходит за пределы поля бегущей строки
                                if (xs[i]> fieldStartX && xs[i]<fieldEndX )
                                    g.drawString(new String(ca), xs[i], y);
			}
		}
	}

        // метод, позволяющий сделать задержку
	private void sleep(int delayInMs) {
		try {
			Thread.sleep(delayInMs);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	private class ArcStringMover { // класс, двигающий строку по контуру дуги

                // константы направления движения
		public static final int FORWARD = 2; // по часовой
		public static final int BACKWARD = 1; // против часовой

		private static final int SPACE_BETWEEN_CHARS = 8;

		private String string;

                // массивы координат символов строки
		private int xs[];
		private int ys[];
		private int direction; // направление движения
		private int x, y; // координаты центра окружности, по которой будет двигаться строку
		private int radius; // радиус окружности
		private int xR, xL; // левая и правая точка (по х), ограничивающая окружность

		public ArcStringMover(String string, int direction, int step, int x, int y, int radius) {
			this.string = string;
			this.direction = direction;

                        // создание массивов координат
			this.xs = new int[string.length()];
			this.ys = new int[string.length()];

                        // определение центра откружности и ее радиуса
			this.x = x;
			this.y = y;
			this.radius = radius;

                        // определение крайних точек по оси ОХ
			this.xL = x - radius;
			this.xR = x + radius;

                        // определение изначальных координат символов строки по контуру окружности

			xs[0] = x - radius;
			ys[0] = y + SPACE_BETWEEN_CHARS;

			int curX = xs[0];

			for (int i = 1; i<string.length(); ++i) {

				boolean moveRight = true;
				boolean moveLeft = false;

				if (moveRight)
					xs[i] = xs[i-1] + SPACE_BETWEEN_CHARS;
				else if (moveLeft) // x--
					xs[i] = xs[i-1] - SPACE_BETWEEN_CHARS;

				curX = xs[i];

				if (curX <=xL ) {
					moveRight = true;
					moveLeft = false;
				}
				else if (curX >= xR) {
					moveRight = false;
					moveLeft = true;
				}


				ys[i] = (int) (Math.sqrt(radius*radius - (xs[i] - x)*(xs[i] - x)) + y); // формула окружности
			}
		}

		public void move(Graphics g) {
			changeCoordinates(); // здвиг всей строки по контуру окружности
			redraw(g); // отображение строки
		}

		private void changeCoordinates() {
			if (direction == BACKWARD) { // если направление движение против часовой
				for (int i = 0; i<string.length(); ++i ) {
					if (xs[i]==xL || ys[i]>y) { // нижняя часть окружности
						xs[i] += SPACE_BETWEEN_CHARS; // сдвинуть символ право

                                                // рассчитать у-кооординату
						ys[i] = (int) (Math.sqrt(radius*radius - (xs[i] - x)*(xs[i] - x))) + y;
					}
					else if (xs[i] == xR || ys[i]<y) { // верхняя часть окружности
						xs[i] -= SPACE_BETWEEN_CHARS; // сдвинуть символ влево
						ys[i] = (int) (y - Math.sqrt(radius*radius - (xs[i] - x)*(xs[i] - x)));
					}
				}
			}
			else if (direction == FORWARD) { // направление по часовой
				for (int i = string.length()-1; i>=0; --i) {
						if (xs[i]==xL || ys[i]<y) {// верхняя часть окружности
							xs[i] += SPACE_BETWEEN_CHARS;
							ys[i] = (int) (y - Math.sqrt(radius*radius - (xs[i] - x)*(xs[i] - x)));
						}
						else if (xs[i] == xR || ys[i]>y) { // нижняя часть окружности
							xs[i] -= SPACE_BETWEEN_CHARS;
							ys[i] = (int) (Math.sqrt(radius*radius - (xs[i] - x)*(xs[i] - x))) + y;
						}
				}
			}
		}

		private void redraw(Graphics g) {
			for (int i = 0; i<string.length(); ++i) {
                                // трюк создания строки из одного символа
				char c = string.charAt(i);
				char ca[] = new char[1];
				ca[0] = c;

                                // отображение символа в соответствии с его координатами
				g.drawString(new String(ca), xs[i], ys[i]);
			}
		}

	}

        // объявить ссылки на соответствующие классы
	private VerticalStringMover up, down;
	private HorisontalStringMover left, right;
	private ArcStringMover forward, backward;

        public static final int WIDTH = 1600, HEIGHT = 1000;

	public void init() {
		this.resize(WIDTH, HEIGHT); // изменить размеры экрана: 800 - ширина, 500 - высота


	}

        // метод, очищающий экран
	public void clear(Graphics g) {
		Dimension d = getSize(); // узнать размеры окна
		g.setColor(Color.WHITE); // установить белый цвет
		g.fillRect(0, 0, d.width, d.height); // закрасить прямоугольник размеров экрана
		g.setColor(Color.BLACK); // установить черной цвет
	}

	public void paint(Graphics g) {
            int i = 0;
		for (;;) {

                    if (i == 0 ) {
                                   // создать соответствующие классы

                            // классы, сдвигающие текст по вертикали
                            up = new VerticalStringMover("Снизу вверх", VerticalStringMover.UP, 5, WIDTH/3, HEIGHT/3, 100, 100);
                            down = new VerticalStringMover("Сверху вниз", VerticalStringMover.DOWN, 5, WIDTH/3, HEIGHT/3, 100, 100);

                            // классы, сдвигающие текст по горизонтали
                            left = new HorisontalStringMover("Справа налево", HorisontalStringMover.LEFT, 5, WIDTH/3 - 100, HEIGHT/3, 100);
                            right = new HorisontalStringMover("Слева направо", HorisontalStringMover.RIGHT, 5, WIDTH/3 + 100, HEIGHT/3, 100);

                            // по окружности
                            forward = new ArcStringMover("По часовой", ArcStringMover.FORWARD, 5, WIDTH/3, HEIGHT/3, 60);
                            backward = new ArcStringMover("Против часовой", ArcStringMover.BACKWARD, 5, WIDTH/3, HEIGHT/3, 80);
                            i++;
                    }
                    if (i<50) {
                            i++;
                        }
                    else if (i == 50) {
                            i=0;
                        }

			clear(g); // очистить экран

                        // сдвинуть все строки

			up.move(g);
			down.move(g);

			left.move(g);
			right.move(g);

			forward.move(g);
			backward.move(g);

			sleep(250); // задержка


		}
	}
   }

   private static Aply ap = new Aply();

    public static void main(String[] args) {
        // create an object of type CaesarCode which is the main applet class
        ap = new Aply();

        javax.swing.JFrame window = new javax.swing.JFrame("Strings");
        window.setContentPane(ap);

        window.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        window.pack();              // Arrange the components.
        window.setVisible(true);    // Make the window visible.
        window.setSize(new Dimension(Aply.WIDTH, Aply.HEIGHT));

        ap.init();   // invoke the applet's init() method
        ap.start();  // starts the applet
    }

}
